/*Lab Assignment - DBMS*/
/*Create the Database*/

create database eCommerce;

use eCommerce;

/*Supplier Table*/
create table if not exists Supplier(
SUPP_ID int primary key,
SUPP_NAME varchar(50) ,
SUPP_CITY varchar(50),
SUPP_PHONE varchar(10)
);

/*Customer Table*/
CREATE TABLE IF NOT EXISTS Customer (
  CUS_ID INT NOT NULL,
  CUS_NAME VARCHAR(20) NULL DEFAULT NULL,
  CUS_PHONE VARCHAR(10),
  CUS_CITY varchar(30) ,
  CUS_GENDER CHAR,
  PRIMARY KEY (CUS_ID));
  
  /*Category Table*/
  CREATE TABLE IF NOT EXISTS Category (
  CAT_ID INT NOT NULL,
  CAT_NAME VARCHAR(20) NULL DEFAULT NULL,
  PRIMARY KEY (CAT_ID)
  );


/*Product Table*/
CREATE TABLE IF NOT EXISTS Product (
  PRO_ID INT NOT NULL,
  PRO_NAME VARCHAR(20) NULL DEFAULT NULL,
  PRO_DESC VARCHAR(60) NULL DEFAULT NULL,
  CAT_ID INT NOT NULL,
  PRIMARY KEY (PRO_ID),
  FOREIGN KEY (CAT_ID) REFERENCES CATEGORY (CAT_ID)
  );


/*Product Details Table*/
CREATE TABLE IF NOT EXISTS Product_Details (
  PROD_ID INT NOT NULL,
  PRO_ID INT NOT NULL,
  SUPP_ID INT NOT NULL,
  PRICE INT NOT NULL,
  PRIMARY KEY (PROD_ID),
  FOREIGN KEY (PRO_ID) REFERENCES PRODUCT (PRO_ID),
  FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER(SUPP_ID)
  );


/*Order Table*/
CREATE TABLE IF NOT EXISTS Orders (
  ORD_ID INT NOT NULL,
  ORD_AMOUNT INT NOT NULL,
  ORD_DATE DATE,
  CUS_ID INT NOT NULL,
  PROD_ID INT NOT NULL,
  PRIMARY KEY (ORD_ID),
  FOREIGN KEY (CUS_ID) REFERENCES CUSTOMER(CUS_ID),
  FOREIGN KEY (PROD_ID) REFERENCES PRODUCT_DETAILS(PROD_ID)
  );


/*Rating Table*/
CREATE TABLE IF NOT EXISTS Rating (
  RAT_ID INT NOT NULL,
  CUS_ID INT NOT NULL,
  SUPP_ID INT NOT NULL,
  RAT_RATSTARS INT NOT NULL,
  PRIMARY KEY (RAT_ID),
  FOREIGN KEY (SUPP_ID) REFERENCES SUPPLIER (SUPP_ID),
  FOREIGN KEY (CUS_ID) REFERENCES CUSTOMER(CUS_ID)
  );
  
  
  /*Supplier Records*/
insert into supplier values(1,"Rajesh Retails","Delhi",'1234567890');
insert into supplier values(2,"Appario Ltd.","Mumbai",'2589631470');
insert into supplier values(3,"Knome products","Banglore",'9785462315');
insert into supplier values(4,"Bansal Retails","Kochi",'8975463285');
insert into supplier values(5,"Mittal Ltd.","Lucknow",'7898456532');

/*Customer Records*/
INSERT INTO CUSTOMER VALUES(1,"AAKASH",'9999999999',"DELHI",'M');
INSERT INTO CUSTOMER VALUES(2,"AMAN",'9785463215',"NOIDA",'M');
INSERT INTO CUSTOMER VALUES(3,"NEHA",'9999999999',"MUMBAI",'F');
INSERT INTO CUSTOMER VALUES(4,"MEGHA",'9994562399',"KOLKATA",'F');
INSERT INTO CUSTOMER VALUES(5,"PULKIT",'7895999999',"LUCKNOW",'M');

/*Category Records*/
INSERT INTO CATEGORY VALUES( 1,"BOOKS");
INSERT INTO CATEGORY VALUES(2,"GAMES");
INSERT INTO CATEGORY VALUES(3,"GROCERIES");
INSERT INTO CATEGORY VALUES (4,"ELECTRONICS");
INSERT INTO CATEGORY VALUES(5,"CLOTHES");

/*Product Records*/
INSERT INTO PRODUCT VALUES(1,"GTA V","DFJDJFDJFDJFDJFJF",2);
INSERT INTO PRODUCT VALUES(2,"TSHIRT","DFDFJDFJDKFD",5);
INSERT INTO PRODUCT VALUES(3,"ROG LAPTOP","DFNTTNTNTERND",4);
INSERT INTO PRODUCT VALUES(4,"OATS","REURENTBTOTH",3);
INSERT INTO PRODUCT VALUES(5,"HARRY POTTER","NBEMCTHTJTH",1);

/*Product Details Records*/
INSERT INTO PRODUCT_DETAILS VALUES(1,1,2,1500);
INSERT INTO PRODUCT_DETAILS VALUES(2,3,5,30000);
INSERT INTO PRODUCT_DETAILS VALUES(3,5,1,3000);
INSERT INTO PRODUCT_DETAILS VALUES(4,2,3,2500);
INSERT INTO PRODUCT_DETAILS VALUES(5,4,1,1000);

/*Orders Records*/
INSERT INTO ORDERS  VALUES(20,1500,"2021-10-12",3,5);
INSERT INTO ORDERS  VALUES(25,30500,"2021-09-16",5,2);
INSERT INTO ORDERS  VALUES(26,2000,"2021-10-05",1,1);
INSERT INTO ORDERS VALUES(30,3500,"2021-08-16",4,3);
INSERT INTO ORDERS VALUES (50,2000,"2021-10-06",2,1);

/*Rating Records*/
INSERT INTO RATING VALUES(1,2,2,4);
INSERT INTO RATING VALUES(2,3,4,3);
INSERT INTO RATING VALUES(3,5,1,5);
INSERT INTO RATING VALUES(4,1,3,2);
INSERT INTO RATING VALUES(5,4,5,4);

/*3) Display the number of the customer group by their genders who have placed any order
of amount greater than or equal to Rs.3000.*/

SELECT C.CUS_GENDER, COUNT(O.CUS_ID) AS NO_OF_CUSTOMERS FROM CUSTOMER C, ORDERS O
WHERE C.CUS_ID = O.CUS_ID AND O.ORD_AMOUNT >=3000 GROUP BY CUS_GENDER;

/*4) Display all the orders along with the product name ordered by a customer having
Customer_Id=2.*/

SELECT O.*, P.PRO_NAME FROM ORDERS O, PRODUCT_DETAILS D, PRODUCT P 
WHERE O.PROD_ID = D.PRO_ID AND D.PRO_ID = P.PRO_ID AND O.CUS_ID = 2;

/*5) Display the Supplier details who can supply more than one product.*/

SELECT S.* FROM SUPPLIER S INNER JOIN  
(SELECT SUPP_ID, COUNT(PROD_ID) AS NO_OF_PRODUCTS FROM PRODUCT_DETAILS GROUP BY 
SUPP_ID HAVING NO_OF_PRODUCTS > 1) AS D ON D.SUPP_ID = S.SUPP_ID;

/*6) Find the category of the product whose order amount is minimum.*/

SELECT C.CAT_NAME FROM CATEGORY C, PRODUCT_DETAILS D, PRODUCT P, ORDERS O 
WHERE C.CAT_ID = P.CAT_ID AND P.PRO_ID = D.PRO_ID AND D.PROD_ID = O.PROD_ID ORDER BY O.ORD_AMOUNT ASC LIMIT 1;

/*7) Display the Id and Name of the Product ordered after “2021-10-05”.*/

SELECT P.PRO_ID, P.PRO_NAME FROM PRODUCT P, PRODUCT_DETAILS D, ORDERS O 
WHERE O.PROD_ID = D.PROD_ID AND D.PRO_ID = P.PRO_ID AND O.ORD_DATE > "2021-10-05";

/*8) Print the top 3 supplier name and id and their rating on the basis of their rating along
with the customer name who has given the rating.*/

SELECT S.SUPP_NAME, S.SUPP_ID, R.RAT_RATSTARS, C.CUS_NAME FROM SUPPLIER S, RATING R, CUSTOMER C
WHERE R.SUPP_ID = S.SUPP_ID AND R.CUS_ID = C.CUS_ID ORDER BY RAT_RATSTARS DESC LIMIT 3; 

/*9) Display customer name and gender whose names start or end with character 'A'.*/

SELECT CUS_NAME, CUS_GENDER FROM CUSTOMER WHERE CUS_NAME LIKE "A%" OR CUS_NAME LIKE "%A";

/*10) Display the total order amount of the male customers.*/

SELECT SUM(ORD_AMOUNT) AS TOTAL_ORDER_AMOUNT_OF_MALE_CUSTOMERS FROM CUSTOMER, ORDERS WHERE ORDERS.CUS_ID = CUSTOMER.CUS_ID AND CUSTOMER.CUS_GENDER = "M";

/*11) Display all the Customers left outer join with the orders.*/

SELECT * FROM CUSTOMER LEFT OUTER JOIN ORDERS ON ORDERS.CUS_ID = CUSTOMER.CUS_ID;

/*12) Create a stored procedure to display the Rating for a Supplier if any along with the
Verdict on that rating if any like if rating >4 then “Genuine Supplier” if rating >2 “Average
Supplier” else “Supplier should not be considered”.*/

DELIMITER &&

CREATE PROCEDURE PROC_SUPP_RATING()
BEGIN

SELECT S.SUPP_ID, S.SUPP_NAME, R.RAT_RATSTARS, 
CASE 
WHEN R.RAT_RATSTARS > 4 THEN "Genuine Supplier"
WHEN R.RAT_RATSTARS > 2 THEN "Average Supplier"
ELSE "Supplier Should not be considered"
END AS VERDICT FROM SUPPLIER S, RATING R WHERE S.SUPP_ID = R.SUPP_ID;

END;
DELIMITER; 

/*Call Procedure*/

CALL PROC_SUPP_RATING();
   